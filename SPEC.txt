The ÂµMaple Kernel
Joel Machens - 2022, 2023

The word SHALL denotes a requirement that must be implemented as specified.
The word MAY denotes a requirement that is recommended, but is discretional for the implementor.

1 - The Kernel API

1.1 - The Kernel Interface
1.1.1 The Kernel shall provide the interrupt 0xAA for accessing the Kernel Interface.
1.1.2 The Kernel shall use the RAX register state (call code) to determine the intended call.
1.1.2 The Kernel shall use registers RBX, RCX, RDX, RSI, & RDI, in that order, to pass the first 5 arguments.
1.1.3 If the called function requires more than 5 arguments, further arguments shall be pushed onto the stack in reverse order.
1.1.4 The Kernel shall return a status value for the specific function in the RAX register.
1.1.5 The Kernel may trash any other register during a call, leaving register state undefined.
1.1.6 The Kernel shall return the status code 0x0 (SUCCESS) on a successful operation.

1.2 - Memory Management
1.2.1 Call Code 0x0 (PMALLOC) shall allocate a specified amount of physical memory which satisfies given contraint flags.
    1 RBX shall contain the number of pages to allocate.
    2 RCX shall contain constraint flags for allocation.
        1 If the first bit is set, allocated memory must be below 1M.
        2 If the second bit is set, allocated memory must be below 4G.
        3 If the third bit is set, allocated memory must start at the location specified by RDX.
        4 If the fourth bit is set, RBX controls allocation in bytes rather than pages.
    3 RDX shall contain the optional start location of allocated memory.
    4 The Kernel shall return the location of allocated memory in RBX if memory was allocated successfully
    5 The Kernel shall return the status 0x1 (RESOURCE_IN_USE) if memory requested is in use or otherwise unavailable.
1.2.2 Call Code 0x1 (PFREE) shall free allocated memory at a certain address.
    1 RBX shall contain the address of the allocation.
    2 If the deallocation fails for any reason, the Kernel shall return the status code 0xF (ERROR)

1.3 - Scheduler
1.3.1 The Scheduler shall implement a high-priority queue for tasks which must be scheduled before any others.
1.3.2 The Scheduler shall implement a normal queue for all other tasks.
1.3.3 Call Code 0x2 (TASK) shall schedule a task for indiscriminate processing in the normal queue.
    1 RBX shall contain the memory address of the task to schedule.
1.3.4 Call Code 0x3 (P_TASK) shall schedule a task for immediate processing in the high-priority queue.
    1 RBX shall contain the memory address of the task to schedule.

1.4 - Modules
1.4.1 Call Code 0x4 (M_REGISTER) shall register a module with the Kernel, providing it's ID, version, and header location. (SEE MX EXECUTABLE SPECIFICATION)
    1 RBX shall contain the memory location of the module's MX header.
    2 The module register shall copy the modules ID and version from it's header to a module LUT.
    4 If the specified MX header is invalid, or the ID is already registerd, the Kernel shall return the status code 0xF (ERROR)
1.4.2 Call Code 0x5 (M_UNREGISTER) shall unregister a module with the Kernel.
    1 RBX shall contain a pointer to an ASCII string representing the module's ID.
    2 If the specified ID does not exist, the Kernel shall return the status code 0xF (ERROR)
1.4.3 Call Code 0x6 (M_GET) shall attempt to locate a module providing the requested ID & version.
    1 RBX shall contain a pointer to an ASCII string representing the module's ID.
    2 RCX shall contain the module's version number.
    3 If a module does not exist with the specified version or ID, the Kernel shall return the status code 0xF (ERROR)
    4 If a module does exist, the Kernel shall return the address of the module's MX header in RBX.

2 - The MX Executable

2.1 - MX Header
2.1.1 The MX header shall contain the following values, in sequential order 
    1 The hex code '4A4D'
    2 The length of the header in bytes (UINT16)
    3 The length of the code segment in bytes (UINT32)
    4 The length of the data segment in bytes (UINT32)
    5 An optional pointer to the optional module name, for system modules
    6 The optional module version, for system modules
    7 Any number of addresses of public interface functions for modules.
        The module is expected to have a public API specified for developers to be able to understand parameters and the header index of each API function.
    8 The sum-complement checksum of the MX Header (UINT32)
2.2 The MX code segment shall come directly after the header
2.3 The MX data segment shall come directly after the code segment
2.4 - Loading an MX
2.4.1 If the specified MX is NOT a module,
    1 Verify the header checksum
    2 Load the code and data segments into contigous virtual memory, offset by the header length
    3 Schedule the top of the code segment as a task.
2.4.2 If the specified MX is a module,
    1 Verify the header checksum
    2 Load the entire executable into contigous virtual memory
    3 Schedule the top of the code segment as a task.
